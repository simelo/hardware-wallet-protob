// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: messages-bitcoin.proto

package messages

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// *
// Request: Ask device to sign transaction
// @start
// @next TxRequest
// @next Failure
type BitcoinSignTx struct {
	OutputsCount         *uint32  `protobuf:"varint,1,req,name=outputs_count,json=outputsCount" json:"outputs_count,omitempty"`
	InputsCount          *uint32  `protobuf:"varint,2,req,name=inputs_count,json=inputsCount" json:"inputs_count,omitempty"`
	CoinName             *string  `protobuf:"bytes,3,opt,name=coin_name,json=coinName,def=Bitcoin" json:"coin_name,omitempty"`
	Version              *uint32  `protobuf:"varint,4,opt,name=version,def=1" json:"version,omitempty"`
	LockTime             *uint32  `protobuf:"varint,5,opt,name=lock_time,json=lockTime,def=0" json:"lock_time,omitempty"`
	Expiry               *uint32  `protobuf:"varint,6,opt,name=expiry" json:"expiry,omitempty"`
	Overwintered         *bool    `protobuf:"varint,7,opt,name=overwintered" json:"overwintered,omitempty"`
	VersionGroupId       *uint32  `protobuf:"varint,8,opt,name=version_group_id,json=versionGroupId" json:"version_group_id,omitempty"`
	Timestamp            *uint32  `protobuf:"varint,9,opt,name=timestamp" json:"timestamp,omitempty"`
	BranchId             *uint32  `protobuf:"varint,10,opt,name=branch_id,json=branchId" json:"branch_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BitcoinSignTx) Reset()         { *m = BitcoinSignTx{} }
func (m *BitcoinSignTx) String() string { return proto.CompactTextString(m) }
func (*BitcoinSignTx) ProtoMessage()    {}
func (*BitcoinSignTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_bitcoin_1c6cc373e9b943f1, []int{0}
}
func (m *BitcoinSignTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BitcoinSignTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BitcoinSignTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BitcoinSignTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BitcoinSignTx.Merge(dst, src)
}
func (m *BitcoinSignTx) XXX_Size() int {
	return m.Size()
}
func (m *BitcoinSignTx) XXX_DiscardUnknown() {
	xxx_messageInfo_BitcoinSignTx.DiscardUnknown(m)
}

var xxx_messageInfo_BitcoinSignTx proto.InternalMessageInfo

const Default_BitcoinSignTx_CoinName string = "Bitcoin"
const Default_BitcoinSignTx_Version uint32 = 1
const Default_BitcoinSignTx_LockTime uint32 = 0

func (m *BitcoinSignTx) GetOutputsCount() uint32 {
	if m != nil && m.OutputsCount != nil {
		return *m.OutputsCount
	}
	return 0
}

func (m *BitcoinSignTx) GetInputsCount() uint32 {
	if m != nil && m.InputsCount != nil {
		return *m.InputsCount
	}
	return 0
}

func (m *BitcoinSignTx) GetCoinName() string {
	if m != nil && m.CoinName != nil {
		return *m.CoinName
	}
	return Default_BitcoinSignTx_CoinName
}

func (m *BitcoinSignTx) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Default_BitcoinSignTx_Version
}

func (m *BitcoinSignTx) GetLockTime() uint32 {
	if m != nil && m.LockTime != nil {
		return *m.LockTime
	}
	return Default_BitcoinSignTx_LockTime
}

func (m *BitcoinSignTx) GetExpiry() uint32 {
	if m != nil && m.Expiry != nil {
		return *m.Expiry
	}
	return 0
}

func (m *BitcoinSignTx) GetOverwintered() bool {
	if m != nil && m.Overwintered != nil {
		return *m.Overwintered
	}
	return false
}

func (m *BitcoinSignTx) GetVersionGroupId() uint32 {
	if m != nil && m.VersionGroupId != nil {
		return *m.VersionGroupId
	}
	return 0
}

func (m *BitcoinSignTx) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *BitcoinSignTx) GetBranchId() uint32 {
	if m != nil && m.BranchId != nil {
		return *m.BranchId
	}
	return 0
}

// *
// Response: Device asks for information for signing transaction or returns the last result
// If request_index is set, device awaits TxAck message (with fields filled in according to request_type)
// If signature_index is set, 'signature' contains signed input of signature_index's input
// @end
// @next TxAck
type BitcoinTxRequest struct {
	RequestType          *RequestType             `protobuf:"varint,1,opt,name=request_type,json=requestType,enum=RequestType" json:"request_type,omitempty"`
	Details              *TxRequestDetailsType    `protobuf:"bytes,2,opt,name=details" json:"details,omitempty"`
	Serialized           *TxRequestSerializedType `protobuf:"bytes,3,opt,name=serialized" json:"serialized,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *BitcoinTxRequest) Reset()         { *m = BitcoinTxRequest{} }
func (m *BitcoinTxRequest) String() string { return proto.CompactTextString(m) }
func (*BitcoinTxRequest) ProtoMessage()    {}
func (*BitcoinTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_bitcoin_1c6cc373e9b943f1, []int{1}
}
func (m *BitcoinTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BitcoinTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BitcoinTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BitcoinTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BitcoinTxRequest.Merge(dst, src)
}
func (m *BitcoinTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *BitcoinTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BitcoinTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BitcoinTxRequest proto.InternalMessageInfo

func (m *BitcoinTxRequest) GetRequestType() RequestType {
	if m != nil && m.RequestType != nil {
		return *m.RequestType
	}
	return RequestType_TXINPUT
}

func (m *BitcoinTxRequest) GetDetails() *TxRequestDetailsType {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *BitcoinTxRequest) GetSerialized() *TxRequestSerializedType {
	if m != nil {
		return m.Serialized
	}
	return nil
}

// *
// Request: Reported transaction data
// @next TxRequest
type BitcoinTxAck struct {
	Tx                   *BitcoinTxAck_TransactionType `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *BitcoinTxAck) Reset()         { *m = BitcoinTxAck{} }
func (m *BitcoinTxAck) String() string { return proto.CompactTextString(m) }
func (*BitcoinTxAck) ProtoMessage()    {}
func (*BitcoinTxAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_bitcoin_1c6cc373e9b943f1, []int{2}
}
func (m *BitcoinTxAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BitcoinTxAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BitcoinTxAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BitcoinTxAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BitcoinTxAck.Merge(dst, src)
}
func (m *BitcoinTxAck) XXX_Size() int {
	return m.Size()
}
func (m *BitcoinTxAck) XXX_DiscardUnknown() {
	xxx_messageInfo_BitcoinTxAck.DiscardUnknown(m)
}

var xxx_messageInfo_BitcoinTxAck proto.InternalMessageInfo

func (m *BitcoinTxAck) GetTx() *BitcoinTxAck_TransactionType {
	if m != nil {
		return m.Tx
	}
	return nil
}

// *
// Structure representing transaction
type BitcoinTxAck_TransactionType struct {
	Version              *uint32            `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Inputs               []*TxInputType     `protobuf:"bytes,2,rep,name=inputs" json:"inputs,omitempty"`
	BinOutputs           []*TxOutputBinType `protobuf:"bytes,3,rep,name=bin_outputs,json=binOutputs" json:"bin_outputs,omitempty"`
	LockTime             *uint32            `protobuf:"varint,4,opt,name=lock_time,json=lockTime" json:"lock_time,omitempty"`
	Outputs              []*TxOutputType    `protobuf:"bytes,5,rep,name=outputs" json:"outputs,omitempty"`
	InputsCnt            *uint32            `protobuf:"varint,6,opt,name=inputs_cnt,json=inputsCnt" json:"inputs_cnt,omitempty"`
	OutputsCnt           *uint32            `protobuf:"varint,7,opt,name=outputs_cnt,json=outputsCnt" json:"outputs_cnt,omitempty"`
	ExtraData            []byte             `protobuf:"bytes,8,opt,name=extra_data,json=extraData" json:"extra_data,omitempty"`
	ExtraDataLen         *uint32            `protobuf:"varint,9,opt,name=extra_data_len,json=extraDataLen" json:"extra_data_len,omitempty"`
	Expiry               *uint32            `protobuf:"varint,10,opt,name=expiry" json:"expiry,omitempty"`
	Overwintered         *bool              `protobuf:"varint,11,opt,name=overwintered" json:"overwintered,omitempty"`
	VersionGroupId       *uint32            `protobuf:"varint,12,opt,name=version_group_id,json=versionGroupId" json:"version_group_id,omitempty"`
	Timestamp            *uint32            `protobuf:"varint,13,opt,name=timestamp" json:"timestamp,omitempty"`
	BranchId             *uint32            `protobuf:"varint,14,opt,name=branch_id,json=branchId" json:"branch_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BitcoinTxAck_TransactionType) Reset()         { *m = BitcoinTxAck_TransactionType{} }
func (m *BitcoinTxAck_TransactionType) String() string { return proto.CompactTextString(m) }
func (*BitcoinTxAck_TransactionType) ProtoMessage()    {}
func (*BitcoinTxAck_TransactionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_bitcoin_1c6cc373e9b943f1, []int{2, 0}
}
func (m *BitcoinTxAck_TransactionType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BitcoinTxAck_TransactionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BitcoinTxAck_TransactionType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BitcoinTxAck_TransactionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BitcoinTxAck_TransactionType.Merge(dst, src)
}
func (m *BitcoinTxAck_TransactionType) XXX_Size() int {
	return m.Size()
}
func (m *BitcoinTxAck_TransactionType) XXX_DiscardUnknown() {
	xxx_messageInfo_BitcoinTxAck_TransactionType.DiscardUnknown(m)
}

var xxx_messageInfo_BitcoinTxAck_TransactionType proto.InternalMessageInfo

func (m *BitcoinTxAck_TransactionType) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *BitcoinTxAck_TransactionType) GetInputs() []*TxInputType {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *BitcoinTxAck_TransactionType) GetBinOutputs() []*TxOutputBinType {
	if m != nil {
		return m.BinOutputs
	}
	return nil
}

func (m *BitcoinTxAck_TransactionType) GetLockTime() uint32 {
	if m != nil && m.LockTime != nil {
		return *m.LockTime
	}
	return 0
}

func (m *BitcoinTxAck_TransactionType) GetOutputs() []*TxOutputType {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *BitcoinTxAck_TransactionType) GetInputsCnt() uint32 {
	if m != nil && m.InputsCnt != nil {
		return *m.InputsCnt
	}
	return 0
}

func (m *BitcoinTxAck_TransactionType) GetOutputsCnt() uint32 {
	if m != nil && m.OutputsCnt != nil {
		return *m.OutputsCnt
	}
	return 0
}

func (m *BitcoinTxAck_TransactionType) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *BitcoinTxAck_TransactionType) GetExtraDataLen() uint32 {
	if m != nil && m.ExtraDataLen != nil {
		return *m.ExtraDataLen
	}
	return 0
}

func (m *BitcoinTxAck_TransactionType) GetExpiry() uint32 {
	if m != nil && m.Expiry != nil {
		return *m.Expiry
	}
	return 0
}

func (m *BitcoinTxAck_TransactionType) GetOverwintered() bool {
	if m != nil && m.Overwintered != nil {
		return *m.Overwintered
	}
	return false
}

func (m *BitcoinTxAck_TransactionType) GetVersionGroupId() uint32 {
	if m != nil && m.VersionGroupId != nil {
		return *m.VersionGroupId
	}
	return 0
}

func (m *BitcoinTxAck_TransactionType) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *BitcoinTxAck_TransactionType) GetBranchId() uint32 {
	if m != nil && m.BranchId != nil {
		return *m.BranchId
	}
	return 0
}

func init() {
	proto.RegisterType((*BitcoinSignTx)(nil), "BitcoinSignTx")
	proto.RegisterType((*BitcoinTxRequest)(nil), "BitcoinTxRequest")
	proto.RegisterType((*BitcoinTxAck)(nil), "BitcoinTxAck")
	proto.RegisterType((*BitcoinTxAck_TransactionType)(nil), "BitcoinTxAck.TransactionType")
}
func (m *BitcoinSignTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BitcoinSignTx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OutputsCount == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("outputs_count")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(*m.OutputsCount))
	}
	if m.InputsCount == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("inputs_count")
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(*m.InputsCount))
	}
	if m.CoinName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(len(*m.CoinName)))
		i += copy(dAtA[i:], *m.CoinName)
	}
	if m.Version != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(*m.Version))
	}
	if m.LockTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(*m.LockTime))
	}
	if m.Expiry != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(*m.Expiry))
	}
	if m.Overwintered != nil {
		dAtA[i] = 0x38
		i++
		if *m.Overwintered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.VersionGroupId != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(*m.VersionGroupId))
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(*m.Timestamp))
	}
	if m.BranchId != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(*m.BranchId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BitcoinTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BitcoinTxRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RequestType != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(*m.RequestType))
	}
	if m.Details != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(m.Details.Size()))
		n1, err := m.Details.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Serialized != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(m.Serialized.Size()))
		n2, err := m.Serialized.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BitcoinTxAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BitcoinTxAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tx != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(m.Tx.Size()))
		n3, err := m.Tx.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BitcoinTxAck_TransactionType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BitcoinTxAck_TransactionType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(*m.Version))
	}
	if len(m.Inputs) > 0 {
		for _, msg := range m.Inputs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMessagesBitcoin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BinOutputs) > 0 {
		for _, msg := range m.BinOutputs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMessagesBitcoin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LockTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(*m.LockTime))
	}
	if len(m.Outputs) > 0 {
		for _, msg := range m.Outputs {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintMessagesBitcoin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.InputsCnt != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(*m.InputsCnt))
	}
	if m.OutputsCnt != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(*m.OutputsCnt))
	}
	if m.ExtraData != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(len(m.ExtraData)))
		i += copy(dAtA[i:], m.ExtraData)
	}
	if m.ExtraDataLen != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(*m.ExtraDataLen))
	}
	if m.Expiry != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(*m.Expiry))
	}
	if m.Overwintered != nil {
		dAtA[i] = 0x58
		i++
		if *m.Overwintered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.VersionGroupId != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(*m.VersionGroupId))
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(*m.Timestamp))
	}
	if m.BranchId != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintMessagesBitcoin(dAtA, i, uint64(*m.BranchId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintMessagesBitcoin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BitcoinSignTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutputsCount != nil {
		n += 1 + sovMessagesBitcoin(uint64(*m.OutputsCount))
	}
	if m.InputsCount != nil {
		n += 1 + sovMessagesBitcoin(uint64(*m.InputsCount))
	}
	if m.CoinName != nil {
		l = len(*m.CoinName)
		n += 1 + l + sovMessagesBitcoin(uint64(l))
	}
	if m.Version != nil {
		n += 1 + sovMessagesBitcoin(uint64(*m.Version))
	}
	if m.LockTime != nil {
		n += 1 + sovMessagesBitcoin(uint64(*m.LockTime))
	}
	if m.Expiry != nil {
		n += 1 + sovMessagesBitcoin(uint64(*m.Expiry))
	}
	if m.Overwintered != nil {
		n += 2
	}
	if m.VersionGroupId != nil {
		n += 1 + sovMessagesBitcoin(uint64(*m.VersionGroupId))
	}
	if m.Timestamp != nil {
		n += 1 + sovMessagesBitcoin(uint64(*m.Timestamp))
	}
	if m.BranchId != nil {
		n += 1 + sovMessagesBitcoin(uint64(*m.BranchId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BitcoinTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestType != nil {
		n += 1 + sovMessagesBitcoin(uint64(*m.RequestType))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessagesBitcoin(uint64(l))
	}
	if m.Serialized != nil {
		l = m.Serialized.Size()
		n += 1 + l + sovMessagesBitcoin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BitcoinTxAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovMessagesBitcoin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BitcoinTxAck_TransactionType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != nil {
		n += 1 + sovMessagesBitcoin(uint64(*m.Version))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovMessagesBitcoin(uint64(l))
		}
	}
	if len(m.BinOutputs) > 0 {
		for _, e := range m.BinOutputs {
			l = e.Size()
			n += 1 + l + sovMessagesBitcoin(uint64(l))
		}
	}
	if m.LockTime != nil {
		n += 1 + sovMessagesBitcoin(uint64(*m.LockTime))
	}
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 1 + l + sovMessagesBitcoin(uint64(l))
		}
	}
	if m.InputsCnt != nil {
		n += 1 + sovMessagesBitcoin(uint64(*m.InputsCnt))
	}
	if m.OutputsCnt != nil {
		n += 1 + sovMessagesBitcoin(uint64(*m.OutputsCnt))
	}
	if m.ExtraData != nil {
		l = len(m.ExtraData)
		n += 1 + l + sovMessagesBitcoin(uint64(l))
	}
	if m.ExtraDataLen != nil {
		n += 1 + sovMessagesBitcoin(uint64(*m.ExtraDataLen))
	}
	if m.Expiry != nil {
		n += 1 + sovMessagesBitcoin(uint64(*m.Expiry))
	}
	if m.Overwintered != nil {
		n += 2
	}
	if m.VersionGroupId != nil {
		n += 1 + sovMessagesBitcoin(uint64(*m.VersionGroupId))
	}
	if m.Timestamp != nil {
		n += 1 + sovMessagesBitcoin(uint64(*m.Timestamp))
	}
	if m.BranchId != nil {
		n += 1 + sovMessagesBitcoin(uint64(*m.BranchId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessagesBitcoin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessagesBitcoin(x uint64) (n int) {
	return sovMessagesBitcoin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BitcoinSignTx) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagesBitcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BitcoinSignTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BitcoinSignTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputsCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutputsCount = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputsCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InputsCount = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessagesBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CoinName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTime", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LockTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expiry = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overwintered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Overwintered = &b
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionGroupId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VersionGroupId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamp = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BranchId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipMessagesBitcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagesBitcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("outputs_count")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("inputs_count")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BitcoinTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagesBitcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BitcoinTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BitcoinTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestType", wireType)
			}
			var v RequestType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (RequestType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequestType = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagesBitcoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &TxRequestDetailsType{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serialized", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagesBitcoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Serialized == nil {
				m.Serialized = &TxRequestSerializedType{}
			}
			if err := m.Serialized.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagesBitcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagesBitcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BitcoinTxAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagesBitcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BitcoinTxAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BitcoinTxAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagesBitcoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &BitcoinTxAck_TransactionType{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagesBitcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagesBitcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BitcoinTxAck_TransactionType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagesBitcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagesBitcoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &TxInputType{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinOutputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagesBitcoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinOutputs = append(m.BinOutputs, &TxOutputBinType{})
			if err := m.BinOutputs[len(m.BinOutputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTime", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LockTime = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagesBitcoin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, &TxOutputType{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputsCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InputsCnt = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputsCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutputsCnt = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagesBitcoin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraData == nil {
				m.ExtraData = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraDataLen", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExtraDataLen = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expiry = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overwintered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Overwintered = &b
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionGroupId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VersionGroupId = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamp = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BranchId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipMessagesBitcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagesBitcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessagesBitcoin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessagesBitcoin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessagesBitcoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessagesBitcoin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessagesBitcoin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessagesBitcoin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessagesBitcoin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessagesBitcoin   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("messages-bitcoin.proto", fileDescriptor_messages_bitcoin_1c6cc373e9b943f1)
}

var fileDescriptor_messages_bitcoin_1c6cc373e9b943f1 = []byte{
	// 634 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x95, 0x76, 0x5b, 0x9b, 0x37, 0x49, 0x99, 0x2c, 0x31, 0x59, 0x1b, 0x2b, 0xa1, 0x4c,
	0x90, 0xcb, 0x32, 0xd6, 0x13, 0xda, 0x8d, 0x32, 0x09, 0x4d, 0xe2, 0x8f, 0x94, 0xe5, 0xc4, 0x25,
	0x72, 0x12, 0xb3, 0x59, 0x4b, 0x9c, 0x10, 0xbb, 0x5b, 0xca, 0x87, 0x42, 0x7c, 0x0c, 0x8e, 0xdc,
	0xb9, 0xa0, 0x7d, 0x02, 0x3e, 0x02, 0x8a, 0x9d, 0xa6, 0x1d, 0x87, 0xc1, 0xa5, 0xaa, 0x9f, 0xe7,
	0xf5, 0x63, 0xe7, 0x7d, 0x7f, 0x09, 0xec, 0xe4, 0x54, 0x08, 0x72, 0x41, 0xc5, 0x61, 0xcc, 0x64,
	0x52, 0x30, 0xee, 0x97, 0x55, 0x21, 0x8b, 0x5d, 0x4b, 0x2e, 0x4a, 0x2a, 0xf4, 0x62, 0xf2, 0xb3,
	0x07, 0xce, 0x4c, 0xdb, 0xe7, 0xec, 0x82, 0x87, 0x35, 0x7a, 0x0a, 0x4e, 0x31, 0x97, 0xe5, 0x5c,
	0x8a, 0x28, 0x29, 0xe6, 0x5c, 0x62, 0xc3, 0xed, 0x79, 0x4e, 0x60, 0xb7, 0xe2, 0xeb, 0x46, 0x43,
	0x4f, 0xc0, 0x66, 0x7c, 0xad, 0xa6, 0xa7, 0x6a, 0x2c, 0xad, 0xe9, 0x92, 0x03, 0x30, 0x9b, 0xd4,
	0x88, 0x93, 0x9c, 0xe2, 0xbe, 0x6b, 0x78, 0xe6, 0xc9, 0xa0, 0x3d, 0x29, 0x18, 0x36, 0xbf, 0xef,
	0x49, 0x4e, 0xd1, 0x1e, 0x0c, 0xae, 0x69, 0x25, 0x58, 0xc1, 0xf1, 0x86, 0x6b, 0x78, 0xce, 0x89,
	0x71, 0x1c, 0x2c, 0x15, 0x34, 0x06, 0x33, 0x2b, 0x92, 0xab, 0x48, 0xb2, 0x9c, 0xe2, 0x4d, 0x6d,
	0xbf, 0x08, 0x86, 0x8d, 0x16, 0xb2, 0x9c, 0xa2, 0x1d, 0xd8, 0xa2, 0x75, 0xc9, 0xaa, 0x05, 0xde,
	0x6a, 0xcc, 0xa0, 0x5d, 0xa1, 0x09, 0xd8, 0xc5, 0x35, 0xad, 0x6e, 0x18, 0x97, 0xb4, 0xa2, 0x29,
	0x1e, 0xb8, 0x86, 0x37, 0x0c, 0xee, 0x68, 0xc8, 0x83, 0xed, 0xf6, 0x98, 0xe8, 0xa2, 0x2a, 0xe6,
	0x65, 0xc4, 0x52, 0x3c, 0x54, 0x29, 0xa3, 0x56, 0x7f, 0xd3, 0xc8, 0x67, 0x29, 0x7a, 0x04, 0x66,
	0x73, 0x01, 0x21, 0x49, 0x5e, 0x62, 0x53, 0x95, 0xac, 0x04, 0xb4, 0x07, 0x66, 0x5c, 0x11, 0x9e,
	0x5c, 0x36, 0x01, 0xa0, 0xdc, 0xa1, 0x16, 0xce, 0xd2, 0xc9, 0x57, 0x03, 0xb6, 0xdb, 0x67, 0x0e,
	0xeb, 0x80, 0x7e, 0x9e, 0x53, 0x21, 0xd1, 0x11, 0xd8, 0x95, 0xfe, 0x1b, 0x35, 0x93, 0xc0, 0x86,
	0x6b, 0x78, 0xa3, 0xa9, 0xed, 0xb7, 0x7e, 0xb8, 0x28, 0x69, 0x60, 0x55, 0xab, 0x05, 0x3a, 0x82,
	0x41, 0x4a, 0x25, 0x61, 0x99, 0xc0, 0x3d, 0xd7, 0xf0, 0xac, 0xe9, 0x43, 0xbf, 0x4b, 0x3b, 0xd5,
	0x86, 0xda, 0xb4, 0xac, 0x42, 0x2f, 0x01, 0x04, 0xad, 0x18, 0xc9, 0xd8, 0x17, 0x9a, 0xaa, 0xde,
	0x5b, 0x53, 0xbc, 0xda, 0x73, 0xde, 0x79, 0x6a, 0xdb, 0x5a, 0xed, 0xe4, 0xdb, 0x06, 0xd8, 0xdd,
	0x85, 0x5f, 0x25, 0x57, 0xe8, 0x10, 0x7a, 0xb2, 0x56, 0x57, 0xb4, 0xa6, 0xfb, 0xfe, 0xba, 0xe5,
	0x87, 0x15, 0xe1, 0x82, 0x24, 0x92, 0x15, 0x5c, 0xe5, 0xf4, 0x64, 0xbd, 0xfb, 0xbb, 0x0f, 0x0f,
	0xfe, 0xd2, 0x11, 0x5e, 0x8d, 0xd8, 0x50, 0xfd, 0xe9, 0xe6, 0x7b, 0x00, 0x5b, 0x9a, 0x18, 0xdc,
	0x73, 0xfb, 0x9e, 0x35, 0xb5, 0xfd, 0xb0, 0x3e, 0x6b, 0x04, 0x95, 0xd7, 0x7a, 0xe8, 0x18, 0xac,
	0x98, 0xf1, 0xa8, 0xe5, 0x0f, 0xf7, 0x55, 0xe9, 0xb6, 0x1f, 0xd6, 0x1f, 0x94, 0x32, 0x63, 0xfa,
	0x78, 0x88, 0x19, 0xd7, 0x8a, 0x68, 0x86, 0xb2, 0x02, 0x67, 0x43, 0x0f, 0xa5, 0xa3, 0xe6, 0x39,
	0x0c, 0x96, 0x59, 0x9b, 0x2a, 0xcb, 0xe9, 0xb2, 0x74, 0x1b, 0x5b, 0x17, 0xed, 0x03, 0x2c, 0x21,
	0xe7, 0xb2, 0x45, 0xcc, 0x6c, 0x11, 0xe7, 0x12, 0x3d, 0x06, 0xab, 0x7b, 0x51, 0xb8, 0x54, 0x90,
	0x39, 0x01, 0x2c, 0x5f, 0x13, 0x2e, 0x9b, 0xfd, 0xb4, 0x96, 0x15, 0x89, 0x52, 0x22, 0x89, 0x82,
	0xcb, 0x0e, 0x4c, 0xa5, 0x9c, 0x12, 0x49, 0xd0, 0x01, 0x8c, 0x56, 0x76, 0x94, 0x51, 0xde, 0xc2,
	0x65, 0x77, 0x25, 0x6f, 0x29, 0x5f, 0x63, 0x1c, 0xee, 0x65, 0xdc, 0xfa, 0x4f, 0xc6, 0xed, 0x7f,
	0x33, 0xee, 0xdc, 0xcb, 0xf8, 0xe8, 0x2e, 0xe3, 0xb3, 0x77, 0xdf, 0x6f, 0xc7, 0xc6, 0x8f, 0xdb,
	0xb1, 0xf1, 0xeb, 0x76, 0x6c, 0xc0, 0xb3, 0xa4, 0xc8, 0x7d, 0x41, 0x64, 0x21, 0x2e, 0x59, 0x46,
	0x62, 0xe1, 0x9f, 0x5f, 0x2d, 0x6e, 0x48, 0x96, 0x51, 0xe9, 0x67, 0x2c, 0xd6, 0x1f, 0x9d, 0x78,
	0xfe, 0x69, 0xe6, 0x74, 0x7a, 0xd3, 0xf3, 0x8f, 0xc3, 0xe5, 0xb7, 0xea, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x52, 0x52, 0xf1, 0xb1, 0xb6, 0x04, 0x00, 0x00,
}
