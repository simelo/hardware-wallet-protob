syntax = "proto2";

/**
 * Types for Skywallet communication
 *
 * @author	Marek Palatinus <slush@satoshilabs.com>
 * @version	1.2
 */

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.Skywallet.lib.protobuf";
option java_outer_classname = "SkywalletType";
option go_package = "messages";

import "types.proto";

/**
 * Request: Ask device to sign transaction
 * @start
 * @next TxRequest
 * @next Failure
 */
message BitcoinSignTx {
    required uint32 outputs_count = 1;                  // number of transaction outputs
    required uint32 inputs_count = 2;                   // number of transaction inputs
    optional string coin_name = 3 [default='Bitcoin'];  // coin to use
    optional uint32 version = 4 [default=1];            // transaction version
    optional uint32 lock_time = 5 [default=0];          // transaction lock_time
	optional uint32 expiry = 6;                         // only for Decred and Zcash
    optional bool overwintered = 7;                     // only for Zcash
    optional uint32 version_group_id = 8;               // only for Zcash, nVersionGroupId when overwintered is set
    optional uint32 timestamp = 9;                      // only for Capricoin, transaction timestamp
    optional uint32 branch_id = 10;                     // only for Zcash, BRANCH_ID when overwintered is set
}

/**
 * Response: Device asks for information for signing transaction or returns the last result
 * If request_index is set, device awaits TxAck message (with fields filled in according to request_type)
 * If signature_index is set, 'signature' contains signed input of signature_index's input
 * @end
 * @next TxAck
 */
message BitcoinTxRequest {
    optional RequestType request_type = 1;              // what should be filled in TxAck message?
    optional TxRequestDetailsType details = 2;          // request for tx details
    optional TxRequestSerializedType serialized = 3;    // serialized data and request for next
}

/**
 * Request: Reported transaction data
 * @next TxRequest
 */
message BitcoinTxAck {
    optional TransactionType tx = 1;
    /**
    * Structure representing transaction
    */
    message TransactionType {
        optional uint32 version = 1;
        repeated TxInputType inputs = 2;
        repeated TxOutputBinType bin_outputs = 3;
        optional uint32 lock_time = 4;
        repeated TxOutputType outputs = 5;
		optional uint32 inputs_cnt = 6;
        optional uint32 outputs_cnt = 7;
		optional bytes extra_data = 8;          // only for Zcash
        optional uint32 extra_data_len = 9;     // only for Zcash
        optional uint32 expiry = 10;            // only for Decred and Zcash
        optional bool overwintered = 11;        // only for Zcash
        optional uint32 version_group_id = 12;  // only for Zcash, nVersionGroupId when overwintered is set
        optional uint32 timestamp = 13;         // only for Capricoin, transaction timestamp
        optional uint32 branch_id = 14;         // only for Zcash, BRANCH_ID when overwintered is set
    }
}